#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
This script merges several files generated by LOAC air quality sensors.
Mass concentration of each pollutant are also computed from µg/m3 values.

USAGE:

./convert_loac.py [directory_name]

where directory_name is the path to the MASS data files.

If no directory_name is provided, the script opens a folder dialog box.
'''

__author__     = "Olivier Nocent and Quentin Martinet"
__copyright__  = "Copyright 2022, Université de Reims Champagne Ardenne"
__license__    = "MIT"
__version__    = "0.0.1"
__maintainer__ = "Olivier Nocent"
__email__      = "olivier.nocent@univ-reims.fr"
__status__     = "Experimental"

from aerolab_utils import *
from progress.bar import IncrementalBar
import easygui
import pandas as pd
import glob
import sys
from os import path

if len(sys.argv) == 1:
    folder_name = easygui.diropenbox(
        msg='Choose a LOAC data folder', title='LOAC data converter')
else:
    folder_name = sys.argv[1]
    if not path.exists(folder_name):
        print('\nERROR:', folder_name, 'does not exist!\n\n')
        exit(0)

output_column_name = [
    'Timestamp',
    'DateTime',
    'Date',
    'Time',
    'TimeNumeric',
    'Seconds',
    'Period',
    'PM2.5 (µg/m3)',
    'Error PM2.5 (µg/m3)',
    'PM10 (µg/m3)',
    'Error PM10 (µg/m3)'
]

input_column_name = [
    'Year',
    'Month',
    'Day',
    'Hour',
    'Minute',
    'Second',
    'Latitude',
    'Longitude',
    'Temperature (°C)',
    'Humidity (%)',
    'Pressure (hPa)',
    'Mean altitude (m)',
    'PM2.5 (µg/m3)',
    'Error PM2.5 (µg/m3)',
    'PM10 (µg/m3)',
    'Error PM10 (µg/m3)'
]

input_column_type = {
    'Year': 'object',
    'Month': 'object',
    'Day': 'object',
    'Hour': 'object',
    'Minute': 'object',
    'Second': 'object',
    'Latitude': 'float64',
    'Longitude': 'float64',
    'Temperature (°C)': 'float64',
    'Humidity (%)': 'float64',
    'Pressure (hPa)': 'float64',
    'Mean altitude (m)': 'float64',
    'PM2.5 (µg/m3)': 'float64',
    'Error PM2.5 (µg/m3)': 'float64',
    'PM10 (µg/m3)': 'float64',
    'Error PM10 (µg/m3)': 'float64'
}

result = pd.DataFrame([], columns=output_column_name)
row = 0
for file_path in glob.glob(folder_name + '/LOAC_LOCAL_????????????.mass'):
    # Extracts file name form file path
    file_name = path.basename(file_path)

    # Loads file content into a DataFrame
    df = pd.read_csv(file_path, names=input_column_name, dtype=input_column_type, encoding='iso-8859-1', sep='\t', skiprows=18, header=None)

    t0 = df['Year'][0] + '-' + df['Month'][0] + '-' + df['Day'][0] + \
         'T' + df['Hour'][0] + ':' + df['Minute'][0] + ':' + df['Second'][0]
    solar_params = get_solar_data(t0, df['Latitude'][0], df['Longitude'][0])

    # Parses rows to compute the values of the newly inserted cells
    bar = IncrementalBar('Processing ' + file_name,
                         max=len(df.index), suffix='%(percent)d%% - %(elapsed)ds')
    for i in df.index:
        # Builds ISO 8601 datetime
        result.loc[row, 'DateTime'] = df['Year'][i] + '-' + df['Month'][i] + '-' + df['Day'][i] + \
         'T' + df['Hour'][i] + ':' + df['Minute'][i] + ':' + df['Second'][i]

        # Computes timestamp: seconds elapsed time since 01/01/1970
        result.loc[row, 'Timestamp'] = int(datetime.timestamp(
            datetime.fromisoformat(result.loc[row, 'DateTime'])))

        # Extracts YYY-MM-DD from the ISO 8601 date string
        result.loc[i, 'Date'] = result.loc[i, 'DateTime'][0:10]

        # Extracts HH:MM:SS from the ISO 8601 date string
        result.loc[i, 'Time'] = result.loc[i, 'DateTime'][11:19]

        # Converts the 'Time' string into a float value (seconds are ignored)
        result.loc[i, 'TimeNumeric'] = int(
            result.loc[i, 'DateTime'][11:13]) + float(result.loc[i, 'DateTime'][14:16])/60

        # Computes elapsed time (in seconds) since the session start
        result.loc[i, 'Seconds'] = compute_duration(result.loc[0, 'DateTime'], result.loc[i, 'DateTime'])

        # Sets the period (day/night) according to the solar sunrise and sunset hours
        current_time = time.fromisoformat(result.loc[row, 'DateTime'][11:19])
        if current_time >= solar_params['sunrise'] and current_time < solar_params['sunset']:
            result.loc[row, 'Period'] = 'Day'
        else:
            result.loc[row, 'Period'] = 'Night'
            
        result.loc[row, 'PM2.5 (µg/m3)'] = df['PM2.5 (µg/m3)'][i]
        result.loc[row, 'Error PM2.5 (µg/m3)'] = df['Error PM2.5 (µg/m3)'][i]
        result.loc[row, 'PM10 (µg/m3)'] = df['PM10 (µg/m3)'][i]
        result.loc[row, 'Error PM10 (µg/m3)'] = df['Error PM10 (µg/m3)'][i]

        row += 1
        
        bar.next()
    bar.finish()

# Sorts DataFrame according DateTime
result.sort_values(by='DateTime', ignore_index=True, inplace=True)

# Saves merged data into a single CSV file
output_filename = f"LOAC_{result['DateTime'].iloc[0][:10]}_{result['DateTime'].iloc[-1][:10]}_full.csv"
print(f'Saving {output_filename}')
result.to_csv(f'{folder_name}/{output_filename}', sep=',', index=False)
