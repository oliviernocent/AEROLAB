#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
This script merges several files generated by AQT530 air quality sensors.
Mass concentration of each pollutant are also computed from ppm values.

USAGE:

./convert_hexoskin.py [hexoskin_file]

If no file is provided, the script opens a file dialog box.
'''

__author__     = "Olivier Nocent and Quentin Martinet"
__copyright__  = "Copyright 2022, Universit√© de Reims Champagne Ardenne"
__license__    = "MIT"
__version__    = "0.0.1"
__maintainer__ = "Olivier Nocent"
__email__      = "olivier.nocent@univ-reims.fr"
__status__     = "Experimental"


from os import path
import sys
import glob
import easygui
from bs4 import BeautifulSoup
from progress.bar import IncrementalBar
import pandas as pd
from aerolab_utils import *

if len(sys.argv) == 1:
    hexoskin_file = easygui.fileopenbox(
        msg='Choose a hexoskin data file', title=' hexoskin data converter')
else:    
    hexoskin_file = sys.argv[1]
    if not path.exists(hexoskin_file):
        print('\nERROR:', hexoskin_file, 'does not exist!\n\n')
        exit(0)

output_column_name = [
    'Timestamp',  
    'DateTime',
    'Date',
    'Time',
    'TimeNumeric',
    'Seconds',
    'breathing_rate [rpm]',
    'minute_ventilation [mL/min]',
    'minute_ventilation_adjusted [mL/min]',
    'activity [g]',
    'heart_rate [bpm]',
    'cadence [spm]'
]

input_column_name = [
 
    'time [s/256]',
    'breathing_rate [rpm](/api/datatype/33/)',
    'minute_ventilation [mL/min](/api/datatype/36/)',
    'minute_ventilation_adjusted [mL/min](/api/datatype/38/)',
    'sleep_position [NA](/api/datatype/270/)',
    'activity [g](/api/datatype/49/)',
    'heart_rate [bpm](/api/datatype/19/)',
    'cadence [spm](/api/datatype/53/)'
]

input_column_type = {
    'time [s/256]': 'int64',
    'breathing_rate [rpm](/api/datatype/33/)': 'float64',
    'minute_ventilation [mL/min](/api/datatype/36/)': 'float64',
    'minute_ventilation_adjusted [mL/min](/api/datatype/38/)': 'float64',
    'sleep_position [NA](/api/datatype/270/)': 'float64',
    'activity [g](/api/datatype/49/)': 'float64',
    'heart_rate [bpm](/api/datatype/19/)': 'float64',
    'cadence [spm](/api/datatype/53/)': 'float64',
}

result = pd.DataFrame([], columns=output_column_name)

# Loads file content into a DataFrame
df = pd.read_csv(hexoskin_file, names=input_column_name,
                    dtype=input_column_type, skiprows=1)

# Parses rows to compute the values of the newly inserted cells
bar = IncrementalBar(f'Processing {hexoskin_file}',
                        max=len(df.index), suffix='%(percent)d%% - %(elapsed)ds')

for i in df.index:
    #convert timestamp 256 en timestamp
    
    timestamp = df.loc[i, 'time [s/256]']//256
    result.loc[i, 'Timestamp'] = timestamp

    # Convert timetamp from the ISO 8601 date string
    result.loc[i, 'DateTime'] = datetime.fromtimestamp(timestamp).isoformat()

    # Extracts YYY-MM-DD from the ISO 8601 date string
    result.loc[i, 'Date'] = result.loc[i, 'DateTime'][0:10]

    # Extracts HH:MM:SS from the ISO 8601 date string
    result.loc[i, 'Time'] = result.loc[i, 'DateTime'][11:19]

    # Converts the 'Time' string into a float value (seconds are ignored)
    result.loc[i, 'TimeNumeric'] = round(int(
        result.loc[i, 'DateTime'][11:13]) + float(result.loc[i, 'DateTime'][14:16])/60, 3)

    # Computes elapsed time (in seconds) since the session start
    result.loc[i, 'Seconds'] = compute_duration(result.loc[0, 'DateTime'], result.loc[i, 'DateTime'])

    result.loc[i, 'breathing_rate [rpm]'] = df.loc[i, 'breathing_rate [rpm](/api/datatype/33/)']
    result.loc[i, 'minute_ventilation [mL/min]'] = df.loc[i, 'minute_ventilation [mL/min](/api/datatype/36/)']
    result.loc[i, 'minute_ventilation_adjusted [mL/min]'] = df.loc[i, 'minute_ventilation_adjusted [mL/min](/api/datatype/38/)']
    result.loc[i, 'activity [g]'] = df.loc[i, 'activity [g](/api/datatype/49/)']
    result.loc[i, 'heart_rate [bpm]'] = df.loc[i, 'heart_rate [bpm](/api/datatype/19/)']
    result.loc[i, 'cadence [spm]'] = df.loc[i, 'cadence [spm](/api/datatype/53/)']

    bar.next()
bar.finish()

# Saves current data into a CSV file
print(f'Saving {hexoskin_file[0:-4]}_full.csv')
result.to_csv(f'{hexoskin_file[0:-4]}_full.csv', sep=',', index=False)
