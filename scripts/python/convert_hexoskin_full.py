#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
This script merges several files generated by Hexoskin non invasive physilological sensor.


USAGE:

./range-???????-G??-?????.csv directory_name



where directory_name is the path to the CSV data files.
'''

__author__     = "Olivier Nocent and Quentin Martinet"
__copyright__  = "Copyright 2022, Université de Reims Champagne Ardenne"
__license__    = "MIT"
__version__    = "0.0.1"
__maintainer__ = "Olivier Nocent"
__email__      = "olivier.nocent@univ-reims.fr"
__status__     = "Experimental"

import sys
from os import path
import glob
import pandas as pd
from aerolab_utils import *
from datetime import datetime

if len(sys.argv) == 1:
    print('\nUSAGE: ./range-???????-G??-?????.csv. directory_name')
    print('\nwhere directory_name is the path to the CSV data files.\n\n')
    exit(0)
    
folder_name = sys.argv[1]
if not path.exists(folder_name):
    print('\nERROR:', folder_name, 'does not exist!\n\n')
    exit(0)


result = pd.DataFrame({
    'sensor':[],
    'Smartbox':[],
    'Timestamp':[],
    'DateTime':[],
    'Date':[],
    'Time':[],
    'Year': [],
    'Month': [],
    'Day': [],
    'Hour': [],
    'Minute': [],
    'Second': [],
    'TimeNumeric':[],
    'breathing_rate [rpm]':[],
    'minute_ventilation [mL/min]':[],
    'minute_ventilation_adjusted [mL/min]':[],
    'heart_rate [bpm]':[],
    'sleep_position [NA]':[],
    'activity [g]':[],
    'cadence [spm]':[],
})


for file_name in glob.glob(folder_name + '/range-???????-G??-?????.csv'):
    # Loads file content into a DataFrame
    df = pd.read_csv(file_name, names=[
            'time [s/256]',
            'breathing_rate [rpm](/api/datatype/33/)',
            'minute_ventilation [mL/min](/api/datatype/36/)',
            'minute_ventilation_adjusted [mL/min](/api/datatype/38/)',
            'sleep_position [NA](/api/datatype/270/)',
            'activity [g](/api/datatype/49/)',
            'heart_rate [bpm](/api/datatype/19/)',
            'cadence [spm](/api/datatype/53/)' 
    ])

    #t0 = df.loc[0, 'Timestamp']
   
    # Inserts new columns
    df.insert(0, 'Sensor', [file_name[-14:-17]] * len(df.index)) # G01 = gilet 01
    df.insert(1, 'Smartbox', [file_name[-17:-23]] * len(df.index)) # numero de serie du boitier a 5 chiffres
   
   # df.insert(2, 'Timestamp', [0] * len(df.index)) # = time [s/256] deja présent
    df.insert(3, 'DateTime', [0] * len(df.index))  # = temps iso
    df.insert(4, 'Date', [0] * len(df.index)) # = DD-MM-YYYY
    df.insert(5, 'Time', [0] * len(df.index)) # = Heure - minute - seconde
   
    df.insert(6, 'Year', [0] * len(df.index)) # EXTRACT DATE YEAR
    df.insert(7, 'Month', [0] * len(df.index)) # EXTRACT DATE MONTH
    df.insert(8, 'Day', [0] * len(df.index)) # EXTRACT DATE DAY
    
    df.insert(9, 'Hour', [0]* len(df.index)) # EXTRACT TIME HOUR
    df.insert(10, 'Minute', [0] * len(df.index)) # EXTRACT TIME MINUTE
    df.insert(11, 'Second', [0] * len(df.index)) # EXTRACT TIME SECONDE

    df.insert(12, 'TimeNumeric', [0] * len(df.index)) # temps utilisable numerique


    # Parses rows to compute the values of the newly inserted cells
    for i in df.index:

        print('Processing ', file_name, ': ', round(i*100/len(df.index)), '%', sep='', end='\r', flush=True)
        try:
            
            #the ISO 8601 date string from 'Timestamp'
            #df.loc[i, 'DateTime'] =  int(datetime.isoformat(datetime.fromtimestamp(df.loc[i, 'Timestamp'])))
            df.loc[i, 'DateTime'] = pd.Timestamp.fromtimestamp(df.loc[i, 'Timestamp'])

            timestamp = df.loc[i, 'Timestamp']
            # convert to datetime
            date_time = datetime.fromtimestamp(timestamp)

            # convert timestamp to string in dd-mm-yyyy HH:MM:SS
            str_date_time = date_time.strftime("%d-%m-%Y, %H:%M:%S")
            print("Result 1:", str_date_time)


            # Extracts YYY-MM-DD from the ISO 8601 date string
            df.loc[i, 'Date'] = df.loc[i, 'DateTime'][0:10]
           
            # Extracts HH-MM-SS from the ISO 8601 date string
            df.loc[i, 'Time'] = df.loc[i, 'DateTime'][11:19]

            # Extracts YEAR from the ISO 8601 date string
            df.loc[i, 'Year'] = df.loc[i, 'DateTime'][0:4]

            # Extracts MONTH from the ISO 8601 date string
            df.loc[i, 'Month'] = df.loc[i, 'DateTime'][5:7]

            # Extracts DAY from the ISO 8601 date string
            df.loc[i, 'Day'] = df.loc[i, 'DateTime'][8:10]   

            # Extracts HOUR from the ISO 8601 date string
            df.loc[i, 'Hour'] = df.loc[i, 'DateTime'][11:13]

            # Extracts MINUTE from the ISO 8601 date string
            df.loc[i, 'Minute'] = df.loc[i, 'DateTime'][14:16]

            # Extracts SECONDE from the ISO 8601 date string
            df.loc[i, 'Second'] = df.loc[i, 'DateTime'][17:19]

            # Converts the 'Time' string into a float value (seconds are ignored)
            df.loc[i, 'TimeNumeric'] = int(
                df.loc[i, 'DateTime'][11:13]) + float(df.loc[i, 'DateTime'][14:16])/60

        

            # Checks if each numeric cell contains a float value
            df.loc[i, 'breathing_rate [rpm]'] = float(df.loc[i, 'Latitude'])
            df.loc[i, 'minute_ventilation [mL/min]'] = float(df.loc[i, 'Longitude'])
            df.loc[i, 'minute_ventilation_adjusted [mL/min]'] = float(df.loc[i, 'Temperature (°C)'])
            df.loc[i, 'heart_rate [bpm]'] = float(df.loc[i, 'Humidity (%)'])
            df.loc[i, 'cadence [spm]'] = float(df.loc[i, 'Pressure (hPa)'])
           


            # Computes mass concentrations
            if df.loc[i, 'breathing_rate [rpm]'] < 0:
                df.loc[i, 'breathing_rate [rpm]'] = None
            else:
                df.loc[i, 'breathing_rate [rpm]']

            if df.loc[i, 'minute_ventilation [mL/min]'] < 0:
                df.loc[i, 'minute_ventilation [mL/min]'] = None
            else:
                df.loc[i, 'minute_ventilation [mL/min]'] 
            
            if df.loc[i, 'minute_ventilation_adjusted [mL/min]'] < 0:
                df.loc[i, 'minute_ventilation_adjusted [mL/min]'] = None
            else:
                df.loc[i, 'minute_ventilation_adjusted [mL/min]'] 

            if df.loc[i, 'heart_rate [bpm]'] < 0:
                df.loc[i, 'heart_rate [bpm]'] = None
            else:
                df.loc[i, 'heart_rate [bpm]'] 

            if df.loc[i, 'cadence [spm]'] < 0:
                df.loc[i,  'cadence [spm]'] = None
            else:
                df.loc[i, 'cadence [spm]'] 


        except ValueError as err:
            print('ERROR in line', i+1, 'of file', file_name, flush=True)
            print(err, flush=True)
            exit()

    # Saves current data into a CSV file
    df.to_csv(file_name[0:-23] + '_full.csv', sep=',', index=False)

    # Merges current data with the previously processed one
    result = pd.concat([result, df], ignore_index=True, sort=False)

    # Flushes stdout
    print('', end='\n', flush=True)

# Saves merged data into a single CSV file
print('Saving ' + file_name[0:-23] + '_full.csv')
result.to_csv(file_name[0:-23] + '_full.csv', sep=',', index=False)

