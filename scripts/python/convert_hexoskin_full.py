#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
This script merges several files generated by Hexoskin non invasive physilological sensor.
Mass concentration of each pollutant are also computed from µg/m3 values.

USAGE:

./LOAC_LOCAL_????????????.mass directory_name

where directory_name is the path to the MASS data files.
'''

__author__     = "Olivier Nocent and Quentin Martinet"
__copyright__  = "Copyright 2022, Université de Reims Champagne Ardenne"
__license__    = "MIT"
__version__    = "0.0.1"
__maintainer__ = "Olivier Nocent"
__email__      = "olivier.nocent@univ-reims.fr"
__status__     = "Experimental"

import sys
from os import path
import glob
import pandas as pd
from aerolab_utils import *

if len(sys.argv) == 1:
    print('\nUSAGE: ./LOAC_LOCAL_????????????.mass. directory_name')
    print('\nwhere directory_name is the path to the MASS data files.\n\n')
    exit(0)
    
folder_name = sys.argv[1]
if not path.exists(folder_name):
    print('\nERROR:', folder_name, 'does not exist!\n\n')
    exit(0)

# GPS coordinates integrated in data file
#latitude = 48.909036
#longitude = -0.469792

result = pd.DataFrame({
    'Year': [],
    'Month': [],
    'Day': [],
    'Hour': [],
    'Minute': [],
    'Second': [],
    'DateTime':[],
    'Date':[],
    'Timestamp':[],
    'TimeNumeric':[],
    'Period' :[], 
    'Latitude': [],
    'Longitude': [],
    'Temperature (°C)': [],
    'Humidity (%)': [],
    'Pressure (hPa)': [],
    'Mean altitude (m)': [],
    'Mass PM2.5 (µg/m3)': [],
    'Mass Error PM2.5 (µg/m3)': [],
    'Mass PM10 (µg/m3)': [],
    'Mass Error PM10 (µg/m3)': [],
})

for file_name in glob.glob(folder_name + '/LOAC_LOCAL_????????????.mass'):
    # Loads file content into a DataFrame
    df = pd.read_csv(file_name, names=[
           'Year',
            'Month',
            'Day',
            'Hour',
            'Minute',
            'Second',
            'Latitude (�N)',
            'Longitude (�E)',
            'Temperature (�C)',
            'Humidity (%)',
            'Pressure (hPa)',
            'Mean altitude (m)',
            'Mass PM2.5 (microgrammes m-3)',
            'Mass Error PM2.5 (microgrammes m-3)',
            'Mass PM10 (microgrammes m-3)',
            'Mass Error PM10 (microgrammes m-3)'
    ])

    t0 = df.loc[0, 'DateTime']
    solar_params = get_solar_data(t0, latitude, longitude)
    # problème comment mettre jour et nuit sachant que l'on dispose d'une latitude et longitude (Period)

    # Inserts new columns
    #df.insert(0, 'Sensor', [file_name[-6:-4]] * len(df.index))
    df.insert(6, 'DateTime', [0] * len(df.index))
    df.insert(7, 'Date', [0] * len(df.index))
    df.insert(8, 'Timestamp', [0] * len(df.index))
    df.insert(9, 'TimeNumeric', [0] * len(df.index))
    df.insert(10, 'Period', df['DateTime'])

    # Parses rows to compute the values of the newly inserted cells
    for i in df.index:
        print('Processing ', file_name, ': ', round(i*100/len(df.index)), '%', sep='', end='\r', flush=True)
        try:
            # Extracts HH:MM:SS from the ISO 8601 date string
            df.loc[i, 'DateTime'] = df.loc[i, 'DateTime'][11:19]
            
            # Extracts YYY-MM-DD from the ISO 8601 date string
            df.loc[i, 'Date'] = df.loc[i, 'DateTime'][0:10]
           
            # Computes timestamp : seconds elapsed time since 01/01/1970
            df.loc[i, 'Timestamp'] = int(datetime.timestamp(datetime.fromisoformat(df.loc[i, 'DateTime'])))

            # Converts the 'Time' string into a float value (seconds are ignored)
            df.loc[i, 'TimeNumeric'] = int(
                df.loc[i, 'DateTime'][11:13]) + float(df.loc[i, 'DateTime'][14:16])/60

            # Sets the period (day/night) according to the solar sunrise and sunset hours
            current_time = time.fromisoformat(df.loc[i, 'DateTime'][11:19])
            if current_time >= solar_params['sunrise'] and current_time < solar_params['sunset']:
                df.loc[i, 'Period'] = 'D'
            else:
                df.loc[i, 'Period'] = 'N'

            # Checks if each numeric cell contains a float value
            df.loc[i, 'Latitude'] = float(df.loc[i, 'Latitude'])
            df.loc[i, 'Longitude'] = float(df.loc[i, 'Longitude'])
            df.loc[i, 'Temperature (°C)'] = float(df.loc[i, 'Temperature (°C)'])
            df.loc[i, 'Humidity (%)'] = float(df.loc[i, 'Humidity (%)'])
            df.loc[i, 'Pressure (hPa)'] = float(df.loc[i, 'Pressure (hPa)'])
            df.loc[i, 'Mass PM2.5 (µg/m3)'] = float(df.loc[i, 'Mass PM2.5 (µg/m3)'])
            df.loc[i, 'Mass Error PM2.5 (µg/m3)'] = float(df.loc[i, 'Mass Error PM2.5 (µg/m3)'])
            df.loc[i, 'Mass PM10 (µg/m3)'] = float(df.loc[i, 'Mass PM10 (µg/m3)'])
            df.loc[i, 'Mass Error PM10 (µg/m3)'] = float(df.loc[i, 'Mass Error PM10 (µg/m3)'])


            # Computes mass concentrations
            if df.loc[i, 'Mass PM2.5 (µg/m3)'] < 0:
                df.loc[i, 'Mass PM2.5 (µg/m3)'] = None
            else:
                df.loc[i, 'Mass PM2.5 (µg/m3)']

            if df.loc[i, 'Mass Error PM2.5 (µg/m3)'] < 0:
                df.loc[i, 'Mass Error PM2.5 (µg/m3)'] = None
            else:
                df.loc[i, 'Mass Error PM2.5 (µg/m3)'] 
            
            if df.loc[i, 'Mass PM10 (µg/m3)'] < 0:
                df.loc[i, 'Mass PM10 (µg/m3)'] = None
            else:
                df.loc[i, 'Mass PM10 (µg/m3)'] 

            if df.loc[i, 'Mass Error PM10 (µg/m3)'] < 0:
                df.loc[i, 'Mass Error PM10 (µg/m3)'] = None
            else:
                df.loc[i, 'Mass Error PM10 (µg/m3)'] 


        except ValueError as err:
            print('ERROR in line', i+1, 'of file', file_name, flush=True)
            print(err, flush=True)
            exit()

    # Saves current data into a CSV file
    df.to_csv(file_name[0:-23] + '_full.csv', sep=',', index=False)

    # Merges current data with the previously processed one
    result = pd.concat([result, df], ignore_index=True, sort=False)

    # Flushes stdout
    print('', end='\n', flush=True)

# Saves merged data into a single CSV file
print('Saving ' + file_name[0:-23] + '_full.csv')
result.to_csv(file_name[0:-23] + '_full.csv', sep=',', index=False)

