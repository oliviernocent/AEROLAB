#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
This script merges several files generated by AQT530 air quality sensors.
Mass concentration of each pollutant are also computed from ppm values.

USAGE:

./convert_aqt530.py [directory_name]

where directory_name is the path to the TXT data files.

If no directory_name is provided, the script opens a folder dialog box.
'''

__author__     = "Olivier Nocent and Quentin Martinet"
__copyright__  = "Copyright 2021, Université de Reims Champagne Ardenne"
__license__    = "MIT"
__version__    = "0.0.1"
__maintainer__ = "Olivier Nocent"
__email__      = "olivier.nocent@univ-reims.fr"
__status__     = "Experimental"

from aerolab_utils import *
from progress.bar import IncrementalBar
import easygui
import pandas as pd
import glob
import sys
from os import path

if len(sys.argv) == 1:
    folder_name = easygui.diropenbox(
        msg='Choose a AQT530 data folder', title='AQT530 data converter')
else:
    folder_name = sys.argv[1]
    if not path.exists(folder_name):
        print('\nERROR:', folder_name, 'does not exist!\n\n')
        exit(0)

# NOTE: in a future release, GPS coordinates will be integrated in data files
latitude = 42.242580
longitude = 4.067757

output_column_name = [
    'Sensor',
    'DateTime',
    'Timestamp',
    'Period',
    'Temperature (°C)',
    'Humidity (%RH)',
    'Pressure (hPa)',
    'NO2 (ppm)',
    'NO2 (µg/m3)',
    'CO (ppm)',
    'CO (mg/m3)',
    'O3 (ppm)',
    'O3 (µg/m3)',
    'NO (ppm)',
    'NO (µg/m3)',
    'PM1 (µg/m3)',
    'PM2.5 (µg/m3)',
    'PM10 (µg/m3)',
    'UPT (s)'
]

input_column_name = [
    'DateTime',
    'Temperature (°C)',
    'Humidity (%RH)',
    'Pressure (hPa)',
    'NO2 (ppm)',
    'CO (ppm)',
    'O3 (ppm)',
    'NO (ppm)',
    'PM1 (µg/m3)',
    'PM2.5 (µg/m3)',
    'PM10 (µg/m3)',
    'C',
    'UPT (s)'
]

input_column_type = {
    'DateTime': 'object',
    'Temperature (°C)': 'float64',
    'Humidity (%RH)': 'float64',
    'Pressure (hPa)': 'float64',
    'NO2 (ppm)': 'float64',
    'CO (ppm)': 'float64',
    'O3 (ppm)': 'float64',
    'NO (ppm)': 'float64',
    'PM1 (µg/m3)': 'float64',
    'PM2.5 (µg/m3)': 'float64',
    'PM10 (µg/m3)': 'float64',
    'C': 'object',
    'UPT (s)': 'int64'
}

result = pd.DataFrame([], columns=output_column_name)


for file_path in glob.glob(f'{folder_name}/DATA_*.TXT'):
    # Extracts file name form file path
    file_name = path.basename(file_path)

    # Loads file content into a DataFrame
    df = pd.read_csv(file_path, names=input_column_name,
                     dtype=input_column_type)

    t0 = df.loc[0, 'DateTime']
    solar_params = get_solar_data(t0, latitude, longitude)

    # Removes data where time interval is less than 10 minutes
    for i in df.index:
        if compute_duration(t0, df.loc[i, 'DateTime']) < 600:
            df.drop(i, inplace=True)
        else:
            t0 = df.loc[i, 'DateTime']
    df.reset_index(drop=True, inplace=True)

    # Removes the column named 'C'
    df.drop(['C'], axis=1, inplace=True)

    # Inserts new columns
    df.insert(0, 'Sensor', [f'AQT530_{file_name[5:-4]}'] * len(df.index))
    df.insert(2, 'Timestamp', [0] * len(df.index))
    df.insert(3, 'Period', df['DateTime'])
    df.insert(8, 'NO2 (µg/m3)', [0] * len(df.index))
    df.insert(10, 'CO (mg/m3)', [0] * len(df.index))
    df.insert(12, 'O3 (µg/m3)', [0] * len(df.index))
    df.insert(14, 'NO (µg/m3)', [0] * len(df.index))

    # Parses rows to compute the values of the newly inserted cells
    bar = IncrementalBar(f'Processing {file_name}',
                         max=len(df.index), suffix='%(percent)d%% - %(elapsed)ds')
    for i in df.index:
        # Computes timestamp : seconds elapsed time since 01/01/1970
        df.loc[i, 'Timestamp'] = int(datetime.timestamp(
            datetime.fromisoformat(df.loc[i, 'DateTime'])))

        # Sets the period (day/night) according to the solar sunrise and sunset hours
        current_time = time.fromisoformat(df.loc[i, 'DateTime'][11:19])
        if current_time >= solar_params['sunrise'] and current_time < solar_params['sunset']:
            df.loc[i, 'Period'] = 'Day'
        else:
            df.loc[i, 'Period'] = 'Night'

        # Computes mass concentrations
        if df.loc[i, 'NO2 (ppm)'] < 0:
            df.loc[i, 'NO2 (ppm)'] = None
            df.loc[i, 'NO2 (µg/m3)'] = None
        else:
            df.loc[i, 'NO2 (µg/m3)'] = ppm_to_mass(df.loc[i, 'NO2 (ppm)'],
                                                   df.loc[i,
                                                          'Temperature (°C)'],
                                                   df.loc[i, 'Pressure (hPa)'], 46.01)

        if df.loc[i, 'CO (ppm)'] < 0:
            df.loc[i, 'CO (ppm)'] = None
            df.loc[i, 'CO (mg/m3)'] = None
        else:
            # CO mass concentration must be expressed in mg/m3 and not in µg/m3
            df.loc[i, 'CO (mg/m3)'] = ppm_to_mass(df.loc[i, 'CO (ppm)'],
                                                  df.loc[i,
                                                         'Temperature (°C)'],
                                                  df.loc[i, 'Pressure (hPa)'], 28.01) / 1000

        if df.loc[i, 'O3 (ppm)'] < 0:
            df.loc[i, 'O3 (ppm)'] = None
            df.loc[i, 'O3 (µg/m3)'] = None
        else:
            df.loc[i, 'O3 (µg/m3)'] = ppm_to_mass(df.loc[i, 'O3 (ppm)'],
                                                  df.loc[i,
                                                         'Temperature (°C)'],
                                                  df.loc[i, 'Pressure (hPa)'], 48)

        if df.loc[i, 'NO (ppm)'] < 0:
            df.loc[i, 'NO (ppm)'] = None
            df.loc[i, 'NO (µg/m3)'] = None
        else:
            df.loc[i, 'NO (µg/m3)'] = ppm_to_mass(df.loc[i, 'NO (ppm)'],
                                                  df.loc[i,
                                                         'Temperature (°C)'],
                                                  df.loc[i, 'Pressure (hPa)'], 30.01)
        bar.next()
    bar.finish()

    # Saves current data into a CSV file
    print(f'Saving {file_name[0:-3]}csv')
    df.to_csv(f'{file_path[0:-3]}csv', sep=',', index=False)

    # Merges current data with the previously processed one
    result = pd.concat([result, df], ignore_index=True, sort=False)

# Saves merged data into a single CSV file
print('Saving DATA.csv')
result.to_csv(f'{folder_name}/DATA.csv', sep=',', index=False)
